@page "/MyLoans"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using System.Globalization
@using NodaTime

<PageTitle>Prêt de livres</PageTitle>

<h3>Prêt de livres</h3>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Titre du livre" aria-label="Titre du livre" aria-describedby="Title" @bind="_newTitle">
    <input type="text" class="form-control" placeholder="Emprunteur" aria-label="Recipient's username" aria-describedby="button-addon2" @bind="_borrower">
    <button class="btn btn-outline-success" type="button" id="button-addon2" @onclick="@(() => Add())">
        <i class="bi bi-plus"></i>
    </button>
</div>

<table class="table">
    <thead>
    <tr>
        <th>Titre</th>
        <th>Emprunteur</th>
        <th>Depuis le</th>
        <th></th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var loan in _loans.Where(l => l.IsVisible))
    {
        <tr>
            <td>@loan.Title</td>
            <td>@loan.Borrower</td>
            <td>
                @if (loan.IsRendered is false)
                {
                    @loan.LoanStartDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)
                }
            </td>
            <td>
                @if (loan.IsRendered)
                {
                    <i class="bi bi-check2"></i>
                }
            </td>
            <td>
                @if (loan.IsRendered is false)
                {
                    <button type="button" class="btn btn-outline-primary" @onclick="@(() => Edit(loan.Id))">
                        Rendu
                    </button>
                }
                <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(loan.Id))">
                    <i class="bi bi-trash-fill"></i>
                </button>

            </td>
        </tr>
    }
    </tbody>
</table>


@code {
    private List<Loan> _loans = new();

    private string _newTitle = string.Empty;
    private string _borrower = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        GetLoans();

        SortList();
    }

    private void SortList()
    {
        _loans = _loans.OrderBy(l => l.IsRendered).ThenBy(l => l.LoanStartDate).ToList();
        StateHasChanged();
    }

    private void Add()
    {
        _loans.Add(new Loan(_newTitle, _borrower, GetCurrentInstant()));

        SortList();
    }

    private void Edit(Guid loanId)
    {
        var renderedLoan = _loans.Find(l => l.Id == loanId);

        renderedLoan?.Rendered();

        SortList();
    }

    private void Delete(Guid loanId)
    {
        var removedLoan = _loans.Find(l => l.Id == loanId);

        removedLoan?.Delete();

        SortList();
    }

    private static Instant GetCurrentInstant() => SystemClock.Instance.GetCurrentInstant();

    private void GetLoans()
    {
        var now = GetCurrentInstant();

        _loans =
        [
            new Loan("Fullmetal Alchemist - Tome 1", "Eva", now.Plus(Duration.FromDays(-10))),
            new Loan("Fullmetal Alchemist - Tome 2", "Eva", now.Plus(Duration.FromDays(-8))),
            new Loan("Fullmetal Alchemist - Tome 3", "Eva", now.Plus(Duration.FromDays(-5))),
            new Loan("Fullmetal Alchemist - Tome 4", "Eva", now.Plus(Duration.FromDays(-2))),
            new Loan("Le problème à 3 corps - Tome 1", "Carla", now.Plus(Duration.FromDays(-12))),
            new Loan("Jouissance Club", "Emeline", now.Plus(Duration.FromDays(-1)))
        ];
    }

    private class Loan
    {
        public Loan(string title, string borrower, Instant loanStartDate, bool isRendered = false)
        {
            Id = Guid.NewGuid();
            Title = title;
            Borrower = borrower;
            LoanStartDate = loanStartDate;
            IsRendered = isRendered;
        }

        public Guid Id { get; }
        public string Title { get; }
        public string Borrower { get; }
        public bool IsRendered { get; set; }
        public bool IsVisible { get; set; } = true;
        public Instant LoanStartDate { get; }
        public Instant? LoanEndDate { get; set; }

        public void Rendered()
        {
            LoanEndDate = GetCurrentInstant();
            IsRendered = true;
        }

        public void Delete()
        {
            IsVisible = false;
        }
    }

}