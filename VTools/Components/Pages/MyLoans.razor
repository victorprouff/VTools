@page "/MyLoans"

@attribute [StreamRendering]
@rendermode InteractiveServer

@inject ILoanDomain LoanDomain

@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using NodaTime
@using VTools.LoanAggregate
@using VTools.LoanAggregate.Models
@using VTools.LoanAggregate.Projections

@attribute [Authorize]

<PageTitle>Prêt de livres</PageTitle>

<h3 class="text-center mb-4" style="margin-top: 100px;">Prêt de livres</h3>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Titre du livre" aria-label="Titre du livre" aria-describedby="Title" @bind="_newTitle">
    <input type="text" class="form-control" placeholder="Emprunteur" aria-label="Recipient's username" aria-describedby="button-addon2" @bind="_borrower">
    <input type="date" class="form-control" placeholder="" aria-label="Recipient's username" aria-describedby="button-addon3" @bind="_date">
    <button class="btn btn-outline-success" type="button" id="button-addon2" @onclick="@(() => Add())">
        <i class="bi bi-plus"></i>
    </button>
</div>

<table class="table">
    <thead>
    <tr>
        <th>Titre</th>
        <th>Emprunteur</th>
        <th>Depuis le</th>
        <th>Rendu le</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var loan in _loans.Where(l => l.IsVisible))
    {
        <tr>
            <td>@loan.Title</td>
            <td>@loan.Borrower</td>
            <td>
                @loan.LoanStartDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)
            </td>
            <td>
                @if (loan.IsRendered)
                {
                    @loan.LoanEndDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)
                }
            </td>
            <td>

                <div class="input-group mb-3">
                    @if (loan.IsRendered)
                    {
                        <button type="button" class="btn btn-outline-warning" @onclick="@(() => SetIsNotRendered(loan.Id))">
                            <i class="bi bi-slash-circle"></i>
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-primary" @onclick="@(() => SetIsRendered(loan.Id))">
                            <i class="bi bi-check2"></i>
                        </button>
                    }
                    <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(loan.Id))">
                        <i class="bi bi-trash-fill"></i>
                    </button>
                </div>

            </td>
        </tr>
    }
    </tbody>
</table>


@code {
    private List<Loan> _loans = [];

    private string _newTitle = string.Empty;
    private string _borrower = string.Empty;
    private DateTime _date = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetLoans();

        SortList();
    }

    private void SortList()
    {
        _loans = _loans.OrderBy(l => l.IsRendered).ThenBy(l => l.LoanStartDate).ToList();
        StateHasChanged();
    }

    private async Task Add()
    {
        await LoanDomain.CreateAsync(new CreateLoanCommand(_newTitle, _borrower, Instant.FromDateTimeUtc(_date.ToUniversalTime())));

        await GetLoans();
    }

    private void SetIsRendered(Guid loanId)
    {
        var renderedLoan = _loans.Find(l => l.Id == loanId);

        if (renderedLoan is not null)
        {
            renderedLoan.Rendered(GetCurrentInstant());

            LoanDomain.UpdateAsync(
                new UpdateLoanCommand(
                    renderedLoan.Id,
                    renderedLoan.Title,
                    renderedLoan.Borrower,
                    renderedLoan.IsRendered,
                    renderedLoan.LoanEndDate));

            SortList();
        }
    }

    private void SetIsNotRendered(Guid loanId)
    {
        var renderedLoan = _loans.Find(l => l.Id == loanId);

        if (renderedLoan is not null)
        {
            renderedLoan.NotRendered();

            LoanDomain.UpdateAsync(
                new UpdateLoanCommand(
                    renderedLoan.Id,
                    renderedLoan.Title,
                    renderedLoan.Borrower,
                    renderedLoan.IsRendered,
                    renderedLoan.LoanEndDate));

            SortList();
        }
    }

    private void Delete(Guid loanId)
    {
        var removedLoan = _loans.Find(l => l.Id == loanId);

        if (removedLoan is not null)
        {
            removedLoan.Delete();

            LoanDomain.DeleteAsync(removedLoan.Id);

            SortList();
        }
    }

    private static Instant GetCurrentInstant() => SystemClock.Instance.GetCurrentInstant();

    private async Task GetLoans()
    {
        var loansProjection = await LoanDomain.GetAllAsync(100, 0);

        _loans = loansProjection.Loans.Select(l => (Loan)l).ToList();

        SortList();
    }

    private class Loan
    {
        private Loan(
            Guid id,
            string title,
            string borrower,
            bool isRendered,
            bool isVisible,
            Instant loanStartDate,
            Instant? loanEndDate)
        {
            Id = id;
            Title = title;
            Borrower = borrower;
            IsRendered = isRendered;
            IsVisible = isVisible;
            LoanStartDate = loanStartDate;
            LoanEndDate = loanEndDate;
        }

        public Guid Id { get; }
        public string Title { get; }
        public string Borrower { get; }
        public bool IsRendered { get; set; }
        public bool IsVisible { get; set; }
        public Instant LoanStartDate { get; }
        public Instant? LoanEndDate { get; set; }

        public void Rendered(Instant loanEnDate)
        {
            LoanEndDate = loanEnDate;
            IsRendered = true;
        }

        public void NotRendered()
        {
            LoanEndDate = null;
            IsRendered = false;
        }

        public void Delete()
        {
            IsVisible = false;
        }

        public static explicit operator Loan(LoanProjection loan) => new(
            loan.Id,
            loan.Title,
            loan.Borrower,
            loan.IsRendered,
            loan.IsVisible,
            loan.LoanStartDate,
            loan.LoanEndDate);
    }

}