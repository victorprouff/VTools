@page "/EnVracHelper"

@using System.Globalization
@using System.Text.RegularExpressions
@using CsvHelper
@using CsvHelper.Configuration
@using VTools.Models.EnVrac

@attribute [StreamRendering]
@rendermode InteractiveServer

<h3 class="text-center mb-4">Download CSV Example</h3>

<div class="text-center input-group mb-4">
    <InputFile OnChange="@OnInputFileChange" class="btn btn-primary" type="button"/>
    <button type="button" class="btn btn-outline-warning" @onclick="@(() => Clear())">Clear</button>
    <span class="input-group-text"> - </span>
    <div class="input-group-text">
        <input class="form-check-input mt-0" type="checkbox" value="" id="flexCheckDefault"
               aria-label="Radio button for following text input" checked="@IsForLinkedin"
               @oninput="@(() => IsForLinkedin = !IsForLinkedin)">
        <label class="form-check-label" for="flexCheckDefault">&nbsp;&nbsp;Is For Linkedin</label>
    </div>
</div>

@if (IsForLinkedin)
{
    <p>Toutes les semaines, je vous partage des ressources pour am√©liorer votre culture num√©rique üëá</p>
    <p>Bonjour !</p>
    <p>Comme chaque semaine pouvez retrouver ici des liens d'articles de vid√©os ou de podcast que j'ai d√©couvert au fil
        de ma veille quotidienne et que j'aimerais partager avec vous. üòÄ</p>
    <p>Vous pourrez retrouver sur mon article de blog :</p>
}
else
{
    <p>Hello ! üòä</p>
    <p>Comme chaque semaine pouvez retrouver ici des liens d‚Äôarticles de vid√©os ou de podcast que j‚Äôai d√©couvert au fil
        de ma veille quotidienne et que j‚Äôaimerais partager avec vous. üòÄ</p>
    <p>Vous pouvez √©galement retrouver :</p>

    <span>- Les deux derniers EnVrac :</span><br/>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;- [[En Vrac] - 27 janvier](https://blog.victorprouff.fr/posts/2025-01-27-envrac/)</span><br/>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;- [[En Vrac] - 02 janvier](https://blog.victorprouff.fr/posts/2025-02-03-envrac/)</span><br/>
    <span>- Et mes deux derniers articles :</span><br/>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;- [Gestionnaires mots de passe - Partie 1 - Pr√©sentation](https://blog.victorprouff.fr/posts/2025-01-28-gestionnaire-mot-de-passe-partie1/)</span><br/>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;- [Gestionnaires mots de passe - Partie 2 - Installation](https://blog.victorprouff.fr/posts/2025-02-05-gestionnaire-mot-de-passe-partie2/)</span><br/>
    <p>N‚Äôh√©sitez pas √† r√©agir en commentaire ou √† partager des ressources que vous trouvez pertinentes !</p>

    <p>Bonne lecture et visionnage ! ‚ò∫Ô∏è</p>
}
@foreach (var categories in _articles.GroupBy(a => a.Category).ToList().Where(categories => categories.Any(a => a.Category == categories.Key)))
{
    if (IsForLinkedin)
    {
        <h3>@categories.Key.ToCategoryString()</h3>
        @foreach (var item in categories)
        {
            <span>- @item.Title @(string.IsNullOrEmpty(item.Description) ? "" : $" : {item.Description}")</span>
            <br/>
        }
    }
    else
    {
        <h3>### @categories.Key.ToCategoryString()</h3>
        foreach (var item in categories)
        {
            <span>- @item.Urls.FirstOrDefault()?.ToMarkdown(item.Title) @(string.IsNullOrEmpty(item.Description) ? "" : $" : {item.Description}")</span>
            <br/>
            @foreach (var url in item.Urls.Skip(1))
            {
                <span>&nbsp;&nbsp;&nbsp;&nbsp;- @url.ToMarkdown()</span>
                <br/>
            }
        }
    }
}

@code {

    List<Article> _articles = [];

    private const string MarkdownLinkPattern = @"\[(.*?)\]\((.*?)\)";
    private const string UrlPattern = @"(?:http[s]?:\/\/.)?(?:www\.)?[-a-zA-Z0-9@%._\+~#=]{2,256}\.[a-z]{2,6}\b(?:[-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)";
    private bool IsForLinkedin { get; set; }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var singleFile = e.File;

        var regex = new Regex(".+\\.csv", RegexOptions.Compiled);
        if (!regex.IsMatch(singleFile.Name))
        {
            //show error invalidad format file
        }
        else
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                NewLine = Environment.NewLine,
                IgnoreBlankLines = true,
                Delimiter = ",",
                HasHeaderRecord = true
            };

            var stream = singleFile.OpenReadStream();
            var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            ms.Position = 0;

            using var reader = new StreamReader(ms);
            using var csv = new CsvReader(reader, config);

            csv.Read();
            csv.ReadHeader();

            var category = Category.Articles;

            while (csv.Read())
            {
                var type = csv.GetField<string>("TYPE");
                var content = csv.GetField<string>("CONTENT");
                var description = csv.GetField<string>("DESCRIPTION");

                if (type == "section")
                {
                    category = content.ConvertToCategory();
                    continue;
                }

                if (type != "task" || category is Category.PutAside) continue;

                ConvertToArticle(description, content, category);
            }
        }
    }

    private void Clear()
    {
        _articles = [];
    }

    private void ConvertToArticle(string? description, string? content, Category category)
    {
        var urls = CleanLinkExtensions.ExtractRegexPattern(description, MarkdownLinkPattern);
        var descriptionWithoutLinks = CleanLinkExtensions.RemoveRegexPattern(description, MarkdownLinkPattern);

        var otherUrls = CleanLinkExtensions.ExtractRegexPattern(description, UrlPattern);
        var descriptionWithoutUrls = CleanLinkExtensions.RemoveRegexPattern(descriptionWithoutLinks, UrlPattern);

        var record = Article.Create(content, CleanText(descriptionWithoutUrls), CleanLinkExtensions.RemoveDoublon(urls.Concat(otherUrls)), category);

        _articles.Add(record);
    }

    private string CleanText(string input) => input.Length == 1 ? string.Empty : input.Replace("\n", "").Replace("- ", "").Replace("-", "");
}