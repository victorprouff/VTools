@page "/csvfile"
@using System.Globalization
@using System.Text.RegularExpressions
@using CsvHelper
@using CsvHelper.Configuration
@using VTools.Models.EnVrac

@attribute [StreamRendering]
@rendermode InteractiveServer

<h3>Download CSV Example</h3>

<InputFile OnChange="@OnInputFileChange" class="btn btn-primary"/>

<ul>
    @foreach (var item in @_items)
    {
        <li>
            Type - @item.Type,
            Content - @item.Content,
            Description - @item.Description
        </li>
    }
</ul>

<table class="table">
    <thead>
    <tr>
        <th>Type</th>
        <th>Content</th>
        <th>Description</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in _articles)
    {
        <tr>
            <td>@item.Category</td>
            <td>@item.Title</td>
            <td>@item.Description</td>
        </tr>
    }
    </tbody>
</table>

@code {

    // TODO :
    // - Gérer les cas ou la description contient plusieurs lignes avec possiblement CsvHelper (pour prendre en compte les "". Peut-être une meilleure gestion des CSV
    // - Regrouper les
    List<Article> _articles = new();
    List<Item> _items = new();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var singleFile = e.File;

        var regex = new Regex(".+\\.csv", RegexOptions.Compiled);
        if (!regex.IsMatch(singleFile.Name))
        {
            //show error invalidad format file
        }
        else
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                NewLine = Environment.NewLine,
                IgnoreBlankLines = true,
                Delimiter = ",",
                HasHeaderRecord = true
            };

            var stream = singleFile.OpenReadStream();
            var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            ms.Position = 0;

            using var reader = new StreamReader(ms);
            using (var csv = new CsvReader(reader, config))
            {

                csv.Read();
                csv.ReadHeader();

                var category = Category.Articles;

                while (csv.Read())
                {
                    var type = csv.GetField<string>("TYPE");
                    var content = csv.GetField<string>("CONTENT");
                    var description = csv.GetField<string>("DESCRIPTION");

                    _items.Add(new Item(type, content, description));

                    if (type == "section")
                    {
                        category = GetCategory(content);
                        continue;
                    }

                    if (type == "task" && category is not Category.PutAside)
                    {
                        var record = Article.Create(content, description, new List<string>(), category);

                        _articles.Add(record);
                    }
                }
            }
        }
    }

    private static Category GetCategory(string? content)
    {
        if (content == Category.Youtube.ToString())
        {
            return Category.Youtube;
        }
        if (content == Category.Articles.ToString())
        {
            return Category.Articles;
        }
        if (content == Category.Tools.ToString())
        {
            return Category.Tools;
        }
        if (content == Category.Podcast.ToString())
        {
            return Category.Podcast;
        }
        if (content == Category.Livre.ToString())
        {
            return Category.Livre;
        }

        return Category.PutAside;
    }

    public class Item
    {
        public string? Type { get; set; }
        public string? Content { get; set; }
        public string? Description { get; set; }
        public Item(string? type, string? content, string? description)
        {
            Type = type;
            Content = content;
            Description = description;
        }
    }

}