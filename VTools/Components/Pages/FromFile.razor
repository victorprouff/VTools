@page "/csvfile"
@using System.Globalization
@using System.Text.RegularExpressions
@using CsvHelper
@using CsvHelper.Configuration
@using VTools.Models.EnVrac

@attribute [StreamRendering]
@rendermode InteractiveServer

<h3>Download CSV Example</h3>

<InputFile OnChange="@OnInputFileChange" class="btn btn-primary"/>
<button type="button" class="btn btn-outline-primary" @onclick="@(() => Clear())">Clear</button>

<div class="form-check">
    <input class="form-check-input" type="checkbox" id="flexCheckDefault" checked="@IsForLinkedin"
           @oninput="@(() => IsForLinkedin = !IsForLinkedin)">
    <label class="form-check-label" for="flexCheckDefault">
        Is For Linkedin
    </label>
</div>

@* <ul> *@
@*     @foreach (var item in @_items) *@
@*     { *@
@*         <li> *@
@*             Type - @item.Type, *@
@*             Content - @item.Content, *@
@*             Description - @item.Description *@
@*         </li> *@
@*     } *@
@* </ul> *@

@if (_articles.Any(a => a.Category == Category.Youtube))
{
    @if (IsForLinkedin)
    {
        <h3>üéûÔ∏è Youtube</h3>
        @foreach (var item in _articles.Where(a => a.Category == Category.Youtube))
        {
            <p>- @item.Title : @item.Description</p>
        }
    }
    else
    {
        <h3>### üéûÔ∏è Youtube</h3>
        @foreach (var item in _articles.Where(a => a.Category == Category.Youtube))
        {
            <p>- @item.Urls.FirstOrDefault()?.ToMarkdown(item.Title): @item.Description</p>
            <ul>
                @foreach (var url in item.Urls.Skip(1))
                {
                    <li>- @url.ToMarkdown()</li>
                }
            </ul>
        }
    }
}
@if (_articles.Any(a => a.Category == Category.Articles))
{
    @if (IsForLinkedin)
    {
        <h3>üìñ Articles</h3>
        @foreach (var item in _articles.Where(a => a.Category == Category.Articles))
        {
            <p>- @item.Title : @item.Description</p>
        }
    }
    else
    {
        <h3>### üìñ Articles</h3>
        @foreach (var item in _articles.Where(a => a.Category == Category.Articles))
        {
            <p>- @item.Urls.FirstOrDefault()?.ToMarkdown(item.Title): @item.Description</p>
            <ul>
                @foreach (var url in item.Urls.Skip(1))
                {
                    <li>- @url.ToMarkdown()</li>
                }
            </ul>
        }
    }
}
@if (_articles.Any(a => a.Category == Category.Tools))
{
    @if (IsForLinkedin)
    {
        <h3>üõ†Ô∏è Tools</h3>
        @foreach (var item in _articles.Where(a => a.Category == Category.Tools))
        {
            <p>- @item.Title : @item.Description</p>
        }
    }
    else
    {
        <h3>### üõ†Ô∏è Tools</h3>
        @foreach (var item in _articles.Where(a => a.Category == Category.Tools))
        {
            <p>- @item.Urls.FirstOrDefault()?.ToMarkdown(item.Title): @item.Description</p>
            <ul>
                @foreach (var url in item.Urls.Skip(1))
                {
                    <li>- @url.ToMarkdown()</li>
                }
            </ul>
        }
    }
}
@if (_articles.Any(a => a.Category == Category.Podcast))
{
    @if (IsForLinkedin)
    {
        <h3>üéß Podcasts</h3>
        @foreach (var item in _articles.Where(a => a.Category == Category.Podcast))
        {
            <p>- @item.Title : @item.Description</p>
        }
    }
    else
    {
        <h3>### üéß Podcasts</h3>
        @foreach (var item in _articles.Where(a => a.Category == Category.Podcast))
        {
            <p>- @item.Urls.FirstOrDefault()?.ToMarkdown(item.Title): @item.Description</p>
            <ul>
                @foreach (var url in item.Urls.Skip(1))
                {
                    <li>- @url.ToMarkdown()</li>
                }
            </ul>
        }
    }
}
@if (_articles.Any(a => a.Category == Category.Livre))
{
    @if (IsForLinkedin)
    {
        <h3>üìö Livres</h3>
        @foreach (var item in _articles.Where(a => a.Category == Category.Livre))
        {
            <p>- @item.Title : @item.Description</p>
        }
    }
    else
    {
        <h3>### üìö Livres</h3>
        @foreach (var item in _articles.Where(a => a.Category == Category.Livre))
        {
            <p>- @item.Urls.FirstOrDefault()?.ToMarkdown(item.Title): @item.Description</p>
            <ul>
                @foreach (var url in item.Urls.Skip(1))
                {
                    <li>- @url.ToMarkdown()</li>
                }
            </ul>
        }
    }
}

@* <table class="table"> *@
@*     <thead> *@
@*     <tr> *@
@*         <th>Type</th> *@
@*         <th>Content</th> *@
@*         <th>Description</th> *@
@*     </tr> *@
@*     </thead> *@
@*     <tbody> *@
@*     @foreach (var item in _articles) *@
@*     { *@
@*         <tr> *@
@*             <td>@item.Category</td> *@
@*             <td>@item.Title</td> *@
@*             <td>@item.Description</td> *@
@*             <td> *@
@*                 <ul> *@
@*                     @foreach (var url in item.Urls) *@
@*                     { *@
@*                         <li>@url</li> *@
@*                     } *@
@*                 </ul> *@
@*             </td> *@
@*         </tr> *@
@*     } *@
@*     </tbody> *@
@* </table> *@

@code {

    List<Article> _articles = [];
    List<Item> _items = [];

    private const string MarkdownLinkPattern = @"\[(.*?)\]\((.*?)\)";
    private const string UrlPattern = @"(?:http[s]?:\/\/.)?(?:www\.)?[-a-zA-Z0-9@%._\+~#=]{2,256}\.[a-z]{2,6}\b(?:[-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)";
    private bool IsForLinkedin { get; set; }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var singleFile = e.File;

        var regex = new Regex(".+\\.csv", RegexOptions.Compiled);
        if (!regex.IsMatch(singleFile.Name))
        {
            //show error invalidad format file
        }
        else
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                NewLine = Environment.NewLine,
                IgnoreBlankLines = true,
                Delimiter = ",",
                HasHeaderRecord = true
            };

            var stream = singleFile.OpenReadStream();
            var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            ms.Position = 0;

            using var reader = new StreamReader(ms);
            using var csv = new CsvReader(reader, config);

            csv.Read();
            csv.ReadHeader();

            var category = Category.Articles;

            while (csv.Read())
            {
                var type = csv.GetField<string>("TYPE");
                var content = csv.GetField<string>("CONTENT");
                var description = csv.GetField<string>("DESCRIPTION");

                _items.Add(new Item(type, content, description));

                if (type == "section")
                {
                    category = content.ConvertToCategory();
                    continue;
                }

                if (type != "task" || category is Category.PutAside) continue;

                ConvertToArticle(description, content, category);
            }
        }
    }

    private void Clear()
    {
        _articles = [];
        _items = new();
    }

    private void ConvertToArticle(string? description, string? content, Category category)
    {
        var urls = CleanLinkExtensions.ExtractRegexPattern(description, MarkdownLinkPattern);
        var descriptionWithoutLinks = CleanLinkExtensions.RemoveRegexPattern(description, MarkdownLinkPattern);

        var otherUrls = CleanLinkExtensions.ExtractRegexPattern(description, UrlPattern);
        var descriptionWithoutUrls = CleanLinkExtensions.RemoveRegexPattern(descriptionWithoutLinks, UrlPattern);

        var record = Article.Create(content, RemoveDashInString(descriptionWithoutUrls), CleanLinkExtensions.RemoveDoublon(urls.Concat(otherUrls)), category);

        _articles.Add(record);
    }

    private string RemoveDashInString(string input) => input.Length == 1 ? string.Empty : input.Replace("- ", "");

    public class Item
    {
        public string? Type { get; set; }
        public string? Content { get; set; }
        public string? Description { get; set; }

        public Item(string? type, string? content, string? description)
        {
            Type = type;
            Content = content;
            Description = description;
        }
    }
}