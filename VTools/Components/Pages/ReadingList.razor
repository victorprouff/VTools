@page "/ReadingList"

@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IBookDomain BookDomain;

@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using NodaTime
@using VTools.BookEntity
@using VTools.BookEntity.Models
@using VTools.BookEntity.Projections

@attribute [Authorize]

<PageTitle>Liste de lecture</PageTitle>

<h3 class="text-center mb-4">Liste de lecture</h3>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Titre du livre" aria-label="Titre du livre"
           aria-describedby="Title" @bind="_newTitle">
    <input type="text" class="form-control" placeholder="Auteur" aria-label="Auteur" aria-describedby="button-addon2"
           @bind="_author">
    <input type="checkbox" class="btn-check" id="btn-check-outlined" autocomplete="off" @bind="_isReading">
    <label class="btn btn-outline-primary" for="btn-check-outlined">Terminé</label><br>
    @if (_isReading)
    {
        <input type="date" class="form-control" placeholder="Terminé le" aria-label="Terminé le"
               aria-describedby="button-addon3" @bind="_endReadingDate">
    }
    <button class="btn btn-outline-success" type="button" id="button-addon2" @onclick="@(() => Add())">
        <i class="bi bi-plus"></i>
    </button>
</div>


<table class="table">
    <thead>
    <tr>
        <th>Titre</th>
        <th>Auteur</th>
        <th>Terminé le</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var book in _books)
    {
        <tr>
            <td>@book.Title</td>
            <td>@book.Author</td>
            <td>
                @* @if (book.IsReading) *@
                @* { *@
                @*     @book.EndReadingDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture) *@
                @* } *@
                @book.EndReadingDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)
            </td>
            <td>

                <div class="input-group mb-3">
                    @if (book.IsUpdate)
                    {
                        <Switch @bind-Value="@book.IsReading" Label="A été lu" />
                        @if (book.IsReading)
                        {
                            <InputDate Type="InputDateType.Date" class="form-control"
                                       max="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@book.EndReadingDate" />
                        }
                        @* <input type="date" class="form-control" placeholder="Terminé le" aria-label="Terminé le" *@
                        @*        aria-describedby="button-addon3" @bind-Value="" @onchange="@(() => Update(book))"> *@

                        <button type="button" class="btn btn-outline-primary"
                                @onclick="@(() => Update(book))">
                            <i class="bi bi-floppy2"></i>
                        </button>
                    }
                    <input type="checkbox" class="btn-check" id=@book.Id autocomplete="off" @bind="@book.IsUpdate">
                    <label class="btn btn-outline-primary" for=@book.Id>
                        <i class="bi bi-pencil-square"></i>
                    </label>
                    <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(book.Id))">
                        <i class="bi bi-trash-fill"></i>
                    </button>
                </div>

            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<Book> _books = [];

    private string _newTitle = string.Empty;
    private string _author = string.Empty;
    private bool _isReading;

    private DateTime _endReadingDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetBooks();

        SortList();
    }

    private async Task Add()
    {
        if (string.IsNullOrWhiteSpace(_newTitle))
        {
            return;
        }

        Instant? endReadingDate = _isReading ? Instant.FromDateTimeUtc(_endReadingDate.ToUniversalTime()) : null;

        await BookDomain.CreateAsync(new CreateBookCommand(_newTitle, _author, "", _isReading, endReadingDate));

        await GetBooks();
    }

    private async Task GetBooks()
    {
        var booksProjection = await BookDomain.GetAllAsync(100, 0);

        _books = booksProjection.Books.Select(l => (Book)l).ToList();

        SortList();
    }

    private void SortList()
    {
        _books = _books.OrderBy(l => l.IsReading).ThenBy(l => l.EndReadingDate).ToList();
        StateHasChanged();
    }

    private async Task Update(Book book)
    {
        Instant? endReadingDate = null;
        if (book.IsReading)
        {
            DateTime toto = book.EndReadingDate ?? DateTime.Now;

            endReadingDate = book.EndReadingDate is not null ? Instant.FromDateTimeUtc(toto.ToUniversalTime()) : null;
        }

        await BookDomain.UpdateAsync(new UpdateBookCommand(book.Id, book.Title, book.Author, "", _isReading, endReadingDate));

        await GetBooks();
    }

    private async Task Delete(Guid id)
    {
        await BookDomain.DeleteAsync(id);

        await GetBooks();
    }

    public class Book
    {
        public Book(
            Guid id,
            string title,
            string author,
            string comment,
            bool isReading,
            DateTime? endReadingDate)
        {
            Id = id;
            Title = title;
            Author = author;
            Comment = comment;
            IsReading = isReading;
            EndReadingDate = endReadingDate;
        }

        public Guid Id { get; }
        public string Title { get; set; }
        public string Author { get; set; }
        public bool IsReading { get; set; }
        public bool IsUpdate { get; set; }
        public string Comment { get; set; }
        // public Instant? EndReadingDate { get; set; }
        public DateTime? EndReadingDate { get; set; }

        public static explicit operator Book(BookProjection book) => new(
            book.Id,
            book.Title,
            book.Author,
            book.Comment,
            book.IsReading,
            book.EndReadingDate?.ToDateTimeUtc());
    }

}