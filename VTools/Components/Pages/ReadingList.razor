@page "/ReadingList"

@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IBookDomain BookDomain;

@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using NodaTime
@using VTools.BookEntity
@using VTools.BookEntity.Models
@using VTools.BookEntity.Projections

@attribute [Authorize]

<PageTitle>Liste de lecture</PageTitle>

<h3 class="text-center mb-4 mt-4">Liste de lecture</h3>

<div class="input-group row">
    <input type="text" class="form-control col-3" placeholder="Titre du livre" aria-label="Titre du livre"
           aria-describedby="Title" @bind="_newTitle">
    <input type="text" class="form-control col-3" placeholder="Auteur" aria-label="Auteur" aria-describedby="button-addon2"
           @bind="_author">

    @if (_isReading)
    {
        <Switch @bind-Value="_isReading" class="col-2" Label="Est terminé"/>
        <input type="date" class="form-control col-3" placeholder="Terminé le" aria-label="Terminé le"
               aria-describedby="button-addon3" @bind="_endReadingDate">
    }
    else
    {
        <Switch @bind-Value="_isReading" class="col-5" Label="Est terminé"/>
    }
    <button class="btn btn-outline-success col-1" type="button" id="button-addon2" @onclick="@(() => Add())">
        <i class="bi bi-plus"></i>
    </button>
</div>
<div class="input-group row mt-3">
    <InputText class="form-control" colspan="5" @bind-Value="_comment" placeholder="Commentaire..." />
</div>

<table class="table mt-3">
    <thead>
    <tr class="row">
        <th class="col-3">Titre</th>
        <th class="col-2">Auteur</th>
        <th class="col-2">Terminé le</th>
        <th class="col-3"></th>
        <th class="col-2"></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var book in _books)
    {
        <tr class="row">
            <td class="col-3">@book.Title</td>
            <td class="col-2">@book.Author</td>
            <td class="col-2">
                <Switch @bind-Value="@book.IsReading"/>
            </td>
            <td class="col-3">
                @if (book.IsReading)
                {
                    if (book.IsUpdate)
                    {
                        <InputDate Type="InputDateType.Date" class="form-control"
                                   max="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@book.EndReadingDate"/>
                    }
                    else
                    {
                        @book.EndReadingDate?.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)
                    }
                }

            </td>
            <td class="col-2">
                <div class="input-group mb-3">
                    @if (book.IsUpdate)
                    {
                        <button type="button" class="btn btn-outline-primary"
                                @onclick="@(() => Update(book))">
                            <i class="bi bi-floppy2"></i>
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-primary"
                                @onclick="@(() => book.IsUpdate = true)">
                            <i class="bi bi-floppy2"></i>
                        </button>
                    }
                    <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(book.Id))">
                        <i class="bi bi-trash-fill"></i>
                    </button>
                </div>

            </td>
        </tr>
        <tr>
            <td colspan="5">
                @if (book.IsUpdate)
                {
                    <InputText class="form-control" @bind-Value="@book.Comment" placeholder="Commentaire..." />
                }
                else
                {
                    @book.Comment
                }
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<Book> _books = [];

    private string _newTitle = string.Empty;
    private string _author = string.Empty;
    private string _comment = string.Empty;
    private bool _isReading;

    private DateTime _endReadingDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetBooks();

        SortList();
    }

    private async Task Add()
    {
        if (string.IsNullOrWhiteSpace(_newTitle))
        {
            return;
        }

        Instant? endReadingDate = _isReading ? Instant.FromDateTimeUtc(_endReadingDate.ToUniversalTime()) : null;

        await BookDomain.CreateAsync(new CreateBookCommand(_newTitle, _author, _comment, _isReading, endReadingDate));

        _newTitle = string.Empty;
        _author = string.Empty;
        _comment = string.Empty;
        _isReading = false;

        await GetBooks();
    }

    private async Task GetBooks()
    {
        var booksProjection = await BookDomain.GetAllAsync(100, 0);

        _books = booksProjection.Books.Select(l => (Book)l).ToList();

        SortList();
    }

    private void SortList()
    {
        // _books = _books.OrderBy(l => l.IsReading).ThenBy(l => l.EndReadingDate).ToList();
        StateHasChanged();
    }

    private async Task Update(Book book)
    {
        Instant? endReadingDate = null;
        if (book.IsReading)
        {
            DateTime toto = book.EndReadingDate ?? DateTime.Now;

            endReadingDate = book.EndReadingDate is not null ? Instant.FromDateTimeUtc(toto.ToUniversalTime()) : null;
        }

        await BookDomain.UpdateAsync(new UpdateBookCommand(book.Id, book.Title, book.Author, book.Comment, book.IsReading, endReadingDate));

        await GetBooks();
    }

    private async Task Delete(Guid id)
    {
        await BookDomain.DeleteAsync(id);

        await GetBooks();
    }

    public class Book
    {
        public Book(
            Guid id,
            string title,
            string author,
            string comment,
            bool isReading,
            DateTime? endReadingDate)
        {
            Id = id;
            Title = title;
            Author = author;
            Comment = comment;
            IsReading = isReading;
            EndReadingDate = endReadingDate;
        }

        public Guid Id { get; }
        public string Title { get; set; }
        public string Author { get; set; }
        public bool IsReading { get; set; }
        public bool IsUpdate { get; set; }
        public string Comment { get; set; }
        // public Instant? EndReadingDate { get; set; }
        public DateTime? EndReadingDate { get; set; }

        public static explicit operator Book(BookProjection book) => new(
            book.Id,
            book.Title,
            book.Author,
            book.Comment,
            book.IsReading,
            book.EndReadingDate?.ToDateTimeUtc());
    }

}