@page "/ImageHelper"
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Drawing.Processing
@using SixLabors.ImageSharp.Formats.Webp
@using Image = SixLabors.ImageSharp.Image
@inject IJSRuntime Js
@rendermode InteractiveServer

<h3>ImageHelper</h3>

<div class="input-group mb-3">
    <Button class="btn btn-outline-success" @onclick="CreateImage">Generate Image</Button>
    <InputFile class="btn btn-outline-success" id="button-addon2" OnChange="LoadFile" accept=".jpg,.png,.gif">
        Charger une image
    </InputFile>
</div>

<div class="p-3">
    <img id="myImage" alt="" src=""/>
</div>


@if (IsNotNullOrWhiteSpace(_logMessage))
{
    <p>
        @_logMessage
    </p>
}


@code {
    private string _logMessage = string.Empty;
    private const long MaxFileSize = 10L * 1024L * 1024L;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles(1).FirstOrDefault();

        if (file is not null)
        {
            try
            {
                var stream = file.OpenReadStream(maxAllowedSize: MaxFileSize);

                var strRef = new DotNetStreamReference(stream);

                await Js.InvokeVoidAsync("setSource", "myImage", strRef, file.ContentType);
            }
            catch (Exception ex)
            {
                _logMessage = $"File: {file.Name} Error: {ex.Message}";
            }
        }
    }

    private async Task CreateImage()
    {
        var img = CreateBlankImage(500, 500);

        DrawTriangleOnImage(img, new PointF(10, 15), new PointF(100, 30), new PointF(200, 150));

        var stream = ImageToStream(img);

        var strRef = new DotNetStreamReference(stream);

        await Js.InvokeVoidAsync("setSource", "myImage", strRef);
    }

    public static void SaveImage(Image<Rgba32> image, string outputPath)
    {
        image.SaveAsPng(outputPath);
    }

    private MemoryStream ImageToStream(Image<Rgba32> image)
    {
        var webPStream = new MemoryStream();

        image.Save(webPStream, new WebpEncoder { Quality = 80 }); // similar image.SaveAsWebp(webPStream);
        webPStream.Position = 0;

        return webPStream;
    }

    private static Image<Rgba32> CreateBlankImage(int width, int height)
    {
        return new Image<Rgba32>(width, height);
    }

    private static void DrawTriangleOnImage(Image<Rgba32> image, PointF point1, PointF point2, PointF point3)
    {
        ValidatePoint(point1);
        ValidatePoint(point2);
        ValidatePoint(point3);

        var pen = Pens.Solid(Color.Red, 3);
        image.Mutate(ctx => ctx.DrawPolygon(pen, point1, point2, point3, point1));
    }

    private static void ValidatePoint(PointF point)
    {
        if (point.X <= 0 || point.Y <= 0)
        {
            throw new ArgumentException("Point coordinates cannot be less than or equal to zero.");
        }
    }

    private void ProcessImage()
    {
        using var img1 = Image.Load<Rgba32>("source1.png");
        using var img2 = Image.Load<Rgba32>("source2.png");
        using var outputImage = new Image<Rgba32>(200, 150);

        // reduce source images to correct dimensions
        // skip if already correct size
        // if you need to use source images else where use Clone and take the result instead
        img1.Mutate(o => o.Resize(new Size(100, 150)));
        img2.Mutate(o => o.Resize(new Size(100, 150)));

        // take the 2 source images and draw them onto the image
        outputImage.Mutate(o => o
                .DrawImage(img1, new Point(0, 0), 1f) // draw the first one top left
                .DrawImage(img2, new Point(100, 0), 1f) // draw the second next to it
        );

        outputImage.Save("ouput.png");
    }

    private bool IsNotNullOrWhiteSpace(string value) => string.IsNullOrWhiteSpace(value);
}