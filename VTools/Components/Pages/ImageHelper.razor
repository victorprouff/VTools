@page "/ImageHelper"
@using SixLabors.ImageSharp.Formats.Webp
@using Image = SixLabors.ImageSharp.Image
@inject IJSRuntime Js
@rendermode InteractiveServer

<h3>ImageHelper</h3>

<div class="input-group mb-3">
    <InputFile class="btn btn-outline-success" id="button-addon2" multiple OnChange="LoadFile" accept=".jpg,.png,.gif">
        Charger une image
    </InputFile>
    @* <Button class="btn btn-outline-success" @onclick="Rotate(90)">90°</Button> *@
    @* <Button class="btn btn-outline-success" @onclick="Rotate(180)">180°</Button> *@
    @* <Button class="btn btn-outline-success" @onclick="Rotate(270)">270°</Button> *@
</div>

<div class="p-3">
    <img id="myImage" alt="" src=""/>
</div>

@code {
    private const long MaxFileSize = 10L * 1024L * 1024L;
    private Image? _image;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();

        if (file is not null)
        {
            try
            {
                var stream = file.OpenReadStream(maxAllowedSize: MaxFileSize);

                using var image = await Image.LoadAsync(stream);
                _image = image;

                await ShowImage();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"File: Error: {ex.Message}");
            }
        }
    }

    private async Task ShowImage()
    {
        if (_image is null) return;

        var webPStream = await ImageToStream(_image);

        var strRef = new DotNetStreamReference(webPStream);

        await Js.InvokeVoidAsync("setSource", "myImage", strRef);
    }

    private static async Task<MemoryStream> ImageToStream(Image image)
    {
        var webPStream = new MemoryStream();

        await image.SaveAsync(webPStream, new WebpEncoder { Quality = 80 }); // similar image.SaveAsWebp(webPStream);
        webPStream.Position = 0;
        return webPStream;
    }
}