@page "/ImageHelper"
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Webp
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Processing
@using Image = SixLabors.ImageSharp.Image
@inject IJSRuntime Js
@rendermode InteractiveServer

<h3>ImageHelper</h3>

<div class="input-group mb-3">
    <InputFile class="btn btn-outline-success" id="button-addon2" multiple OnChange="LoadFile" accept=".jpg,.png,.gif">
        Charger une image
    </InputFile>
</div>
<div class="input-group mb-3">
    <Button class="btn btn-outline-success" @onclick="@(() => RotateLess90())">
        <i class="bi bi-arrow-counterclockwise"></i>
    </Button>
    <Button class="btn btn-outline-success" @onclick="@(() => ChooseColor())">
        <i class="bi bi-palette"></i>
    </Button>
    <Button class="btn btn-outline-success" @onclick="@(() => RotateMore90())">
        <i class="bi bi-arrow-clockwise"></i>
    </Button>

</div>

<div style="border: 5px solid #ccc; width: 500px; height: 500px; display: flex;
justify-content: center;  align-items: center; @_imgBackGroundColor">
    <img id="myImage" alt="" src="" style="max-width: 100%; max-height: 100%; @_imgTransform"/>
</div>

<button class="btn btn-outline-success" @onclick="DownloadFile">Download File</button>


@code {
    private const long MaxFileSize = 10L * 1024L * 1024L;
    private Image? _imageSource;
    private string _fileName = string.Empty;
    private int _imgRotation;
    private string _imgTransform = string.Empty;
    private bool _imgColorIsWhite = true;
    private string _imgBackGroundColor = string.Empty;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();

        if (file is not null)
        {
            try
            {
                var stream = file.OpenReadStream(maxAllowedSize: MaxFileSize);
                _fileName = file.Name;

                _imageSource = await StreamToImage(stream);

                await ShowImage(await ImageToStream(_imageSource));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"File: Error: {ex.Message}");
            }
        }
    }

    private async Task ShowImage(Stream stream)
    {
        var strRef = new DotNetStreamReference(stream);

        await Js.InvokeVoidAsync("setSource", "myImage", strRef);
    }

    private static async Task<MemoryStream> ImageToStream(Image image, int quality = 80)
    {
        var webPStream = new MemoryStream();

        await image.SaveAsync(webPStream, new WebpEncoder
        {
            Quality = quality
        });
        webPStream.Position = 0;

        return webPStream;
    }

    private static async Task<Image> StreamToImage(Stream stream)
    {
        return await Image.LoadAsync(stream);
    }

    private void RotateMore90()
    {
        _imgRotation += 90;

        if (_imgRotation >= 360)
        {
            _imgRotation = 0;
        }

        SetImgTransform();
    }

    private void RotateLess90()
    {
        if (_imgRotation <= 0)
        {
            _imgRotation = 360;
        }

        _imgRotation -= 90;

        SetImgTransform();
    }

    private void SetImgTransform()
    {
        _imgTransform = _imgRotation == 0 ? "transform: rotate(0);" : $"transform: rotate({_imgRotation}deg)";
    }

    private void ChooseColor()
    {
        _imgBackGroundColor = _imgColorIsWhite ? "background-color: #000000;" : "background-color: #ffffff;";
        _imgColorIsWhite = !_imgColorIsWhite;
    }

    private async Task DownloadFile()
    {
        if (_imageSource is null) return;

        ProcessImage();
        var stream = await ImageToStream(_imageSource, 100);

        using var streamRef = new DotNetStreamReference(stream: stream);
        {
            await Js.InvokeVoidAsync("downloadFileFromStream", _fileName, streamRef);
        }
    }

    private void ProcessImage()
    {
        _imageSource?.Mutate(x => x
            .Resize(new ResizeOptions
            {
                Size = new Size(1080, 1080),
                Mode = ResizeMode.Pad
            }));

        _imageSource?.Mutate(img => img.Rotate(_imgRotation));

        if (_imgColorIsWhite)
        {
            _imageSource?.Mutate(img => img.BackgroundColor(Color.White));
        }
        else
        {
            _imageSource?.Mutate(img => img.BackgroundColor(Color.Black));
        }
    }

}