@page "/ImageHelper"
@using System.Diagnostics
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Webp
@using SixLabors.ImageSharp.Processing
@using VTools.Services
@using Image = SixLabors.ImageSharp.Image
@inject IWebHostEnvironment Environment
@inject IJSRuntime Js
@rendermode InteractiveServer

<h3 class="text-center mb-4">Image Helper</h3>

<div class="input-group mb-3">
    <InputFile class="btn btn-outline-success" id="button-addon2" multiple OnChange="LoadFile" accept=".jpg,.png,.gif">
        Charger une image
    </InputFile>
</div>

@if (_isLoading)
{
    <p>Loading ...</p>
}
else
{
    <div class="input-group mb-3">
        <Button class="btn btn-outline-success" @onclick="@(() => RotateLess90())">
            <i class="bi bi-arrow-counterclockwise"></i>
        </Button>
        <Button class="btn btn-outline-success" @onclick="@(() => ChooseColor())">
            <i class="bi bi-palette"></i>
        </Button>
        <Button class="btn btn-outline-success" @onclick="@(() => RotateMore90())">
            <i class="bi bi-arrow-clockwise"></i>
        </Button>
    </div>
}

<div style="@(_isLoading ? "" : $"border: 2px solid #ccc; width: 500px; height: 500px; display: flex; justify-content: center; align-items: center; {_imgBackGroundColor}") ">
    <img id="myImage" alt="" src="" style="max-width: 100%; max-height: 100%; @(_isLoading ? "display: none;" : "") @_imgTransform"/>
</div>

@if (!_isLoading)
{
    <button class="btn btn-outline-success" @onclick="DownloadFile">Download File</button>
}

@code {
    private bool _isLoading = true;
    private bool _showDownloadFile;

    private const long MaxFileSize = 10L * 1024L * 1024L;
    private Image? _imageSource;
    private string _fileName = string.Empty;
    private string _contentType = string.Empty;

    private readonly RotateService _imgRotation = new();
    private string _imgTransform = string.Empty;

    private bool _imgColorIsWhite = true;
    private string _imgBackGroundColor = string.Empty;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        _isLoading = true;
        _showDownloadFile = false;

        var file = e.GetMultipleFiles(1).FirstOrDefault();

        if (file is not null)
        {
            try
            {
                _fileName = file.Name;
                _contentType = file.ContentType;

                await ShowImage(file);

                _imageSource = await StreamToImage(file);
                _isLoading = false;
                _showDownloadFile = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"File: Error: {ex.Message}");
            }
        }
    }

    private static async Task<Image> StreamToImage(IBrowserFile browserFile) =>
        await Image.LoadAsync(browserFile.OpenReadStream(MaxFileSize));

    private async Task ShowImage(IBrowserFile browserFile)
    {
        var strRef = new DotNetStreamReference(browserFile.OpenReadStream(MaxFileSize));
        await Js.InvokeVoidAsync("setSource", "myImage", strRef, _contentType, _fileName);
    }

    private async Task DownloadFile()
    {
        if (_imageSource is null) return;

        ProcessImage();
        var stream = await ImageToStream(_imageSource, 100);

        using var streamRef = new DotNetStreamReference(stream: stream);
        {
            await Js.InvokeVoidAsync("downloadFileFromStream", _fileName, streamRef);
        }
    }

    private void ProcessImage()
    {
        _imageSource?.Mutate(x => x
            .Resize(new ResizeOptions
            {
                Size = new Size(1080, 1080),
                Mode = ResizeMode.Pad
            })
            .Rotate(_imgRotation.Value)
            .BackgroundColor(_imgColorIsWhite ? Color.White : Color.Black)
        );
    }

    private static async Task<MemoryStream> ImageToStream(Image image, int quality = 80)
    {
        var webPStream = new MemoryStream();

        await image.SaveAsync(webPStream, new WebpEncoder
        {
            Quality = quality
        });
        webPStream.Position = 0;

        return webPStream;
    }

    private void RotateMore90()
    {
        _imgRotation.RotateMore90();

        SetImgTransform();
    }

    private void RotateLess90()
    {
        _imgRotation.RotateLess90();

        SetImgTransform();
    }

    private void SetImgTransform()
    {
        _imgTransform = _imgRotation.GetRotateTransform();
    }

    private void ChooseColor()
    {
        _imgBackGroundColor = _imgColorIsWhite ? "background-color: #000000;" : "background-color: #ffffff;";
        _imgColorIsWhite = !_imgColorIsWhite;
    }
}