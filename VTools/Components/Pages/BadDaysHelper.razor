@page "/BadDaysHelper"
@using System.Text.Json
@using System.Text.RegularExpressions
@using VTools.BadDayPostAggregate
@using VTools.BadDayPostAggregate.Commands
@inject IJSRuntime JsRuntime;
@inject IBadDayPostDomain BadDayPostDomain;

@rendermode InteractiveServer

<h2 class="text-center mb-4">BadDays Helper</h2>
<h3>Import File</h3>

<div class="input-group mb-3">
    <input type="number" class="form-control" placeholder="Max file size" @bind="_maxFileSize">
    <input type="number" class="form-control" placeholder="Max allowed files" @bind="_maxAllowedFiles">
    <InputFile class="btn btn-outline-success" id="button-addon2" OnChange="LoadFile" accept=".csv,.txt">
        <i class="bi bi-plus"></i>
    </InputFile>
    <button type="button" class="btn btn-outline-primary" @onclick="@(() => Save())">Save In Database</button>
</div>

@if (_isLoading)
{
    <p>Uploading...</p>
}
else
{
    <div class="table-responsive table-max-height">
        <table class="table">
            <thead>
            <tr>
                <th>Type</th>
                <th>Url</th>
                <th>Id</th>
                <th>Origin</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var post in _postImports)
            {
                <tr class="@(post.IsExist ? "table-danger" : "")">
                    <td>@post.Type</td>
                    <td>@post.Url</td>
                    <td>@post.InstagramId</td>
                    <td>@post.Origin</td>
                    <td>
                        <button type="button" class="btn btn-outline-primary" @onclick="@(() => Show(post.InstagramId))">Show</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

<h3>Show database</h3>
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search InstagramId or Url" @bind="_search" @oninput="@(e => SearchPosts(e.Value))"/>
    <button type="button" class="btn btn-outline-primary" @onclick="@(() => ConvertToJson())">Convert To Json</button>
</div>

<div class="table-responsive table-max-height">
    <table class="table">
        <thead>
        <tr>
            <th>Url</th>
            <th>Id</th>
            <th>Created At</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var post in _searchedPosts)
        {
            <tr>
                <td>@post.Url</td>
                <td>@post.InstagramId</td>
                <td>@post.CreatedAt</td>
                <td>
                    <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(post.Id))">Delete</button>
                    <button type="button" class="btn btn-outline-primary" @onclick="@(() => Show(post.InstagramId))">Show</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Instagram Id" @bind="_idSelected">
    <button type="button" class="btn btn-outline-primary" @onclick="@(() => Show())">Show</button>
</div>

@if (string.IsNullOrEmpty(_idSelected) is false)
{
    <iframe src="https://www.instagram.com/p/@(_idSelected)/embed"
            width="540"
            height="600"
            frameborder="0"
            scrolling="no"
            allowtransparency>
    </iframe>
}

@if (string.IsNullOrEmpty(_errorMessage) is false)
{
    <p>@_errorMessage</p>
}

@if (string.IsNullOrEmpty(_result) is false)
{
    <textarea class="form-control" aria-multiline="true" rows="20" aria-label="_result" aria-describedby="_result" @bind="@_result"></textarea>
}

@code {

    // TODO : Amélioration :
    // Voir s'il est possible de se connecter à github pour push directement les modifications

    private long _maxFileSize = 1024 * 15;
    private int _maxAllowedFiles = 3;
    private bool _isLoading;

    private List<PostImport> _postImports = [];
    private List<BadDayPost> _posts = [];
    private List<BadDayPost> _searchedPosts = [];

    private string _errorMessage = string.Empty;
    private string _result = string.Empty;
    private string _idSelected = string.Empty;
    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        var result = await BadDayPostDomain.GetAllAsync();

        _searchedPosts = _posts = result.ToList();
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        _isLoading = true;

        var file = e.GetMultipleFiles(_maxAllowedFiles).FirstOrDefault();

        if (file is not null)
        {
            try
            {
                var stream = file.OpenReadStream();

                using var reader = new StreamReader(stream);

                var line = string.Empty;

                while ((line = await reader.ReadLineAsync()) != null)
                {
                    ConvertToPostImport(line);
                }
            }
            catch (Exception ex)
            {
                _errorMessage = $"File: {file.Name} Error: {ex.Message}";
            }
        }

        _isLoading = false;
    }

    private void SearchPosts(object? value)
    {
        var search = value is null ? string.Empty : (string)value;

        _searchedPosts = _posts.Where(p =>
            p.InstagramId.Contains(search, StringComparison.InvariantCultureIgnoreCase) ||
            p.Url.Contains(search, StringComparison.InvariantCultureIgnoreCase)).ToList();
    }

    private async Task Show(string? postId = null)
    {
        if (postId is not null)
        {
            _idSelected = postId;
        }

        await JsRuntime.InvokeVoidAsync("refreshInstagramEmbed");
    }

    private async Task Delete(Guid? id = null)
    {
        if (id is null)
        {
            return;
        }

        _search = string.Empty;

        await BadDayPostDomain.DeleteAsync((Guid)id);

        await LoadPosts();
    }

    private async Task Save()
    {
        var postsToSave = _postImports.Where(p => p.IsExist is false).ToList();
        foreach (var postImport in postsToSave)
        {
            await BadDayPostDomain.CreateAsync(new CreateBadDayPostCommand(postImport.Url, postImport.InstagramId));
        }

        if (postsToSave.Any())
        {
            await LoadPosts();
            _postImports = [];
        }
    }

    private void ConvertToPostImport(string line)
    {
        var result = line.Split("|");

        var type = result[0];
        var url = result[1];
        var origin = result[2];
        var instagramId = GetInstagramId(url);

        var isExist = _posts.Any(p => p.InstagramId == instagramId);

        _postImports.Add(new PostImport(type, url, instagramId, isExist, origin));
    }

    private static string GetInstagramId(string url)
    {
        const string pattern = @"(?:reel|p)\/([^\/?]+)";

        var match = Regex.Match(url, pattern);
        return match.Success ? match.Groups[1].Value : string.Empty;
    }

    private void ConvertToJson()
    {
        var jsonObjectArray = _posts.Select(item => new
        {
            Name = "Init import",
            item.Url,
            Id = item.InstagramId,
            Type = 1
        });

        _result = JsonSerializer.Serialize(jsonObjectArray, new JsonSerializerOptions
        {
            WriteIndented = true // pour une sortie JSON beautifiée
        });
    }

    public class PostImport
    {
        public string Type { get; }
        public string Url { get; }
        public string InstagramId { get; }
        public bool IsExist { get; }
        public string? Origin { get; }

        public PostImport(string type, string url, string instagramId, bool isExist, string? origin)
        {
            Type = type;
            Url = url;
            InstagramId = instagramId;
            IsExist = isExist;
            Origin = origin;
        }
    }

}